// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Built from three chips: a 16K RAM, the built in screen and keyboard
    // Depending on the address, we must read/write from the right chip
    // The first 16384 words use the 16K RAM. 
    // This number can be represented by the 14 most significant bits
    // Meaning the 15 MSB tells us if we're using the RAM or not
    // If it's 0, the address is 16384 or less, and it's the RAM
    // If it's 1, it'll use the screen or keyboard (io)


    // Start by splitting the load to RAM and IO load using the MSB
    DMux(in=load, sel=address[14], a=ramload, b=ioload);
    // The 14 MSB tells us if the number is above 8192, which means it's the keyboard
    // IO load will only be 1 if it's in the IO range
    DMux(in=ioload, sel=address[13], a=screenload, b=keyload);

    // Register each submemory
    RAM16K(in=in, load=ramload, address=address[0..13], out=ramout);
    Screen(in=in, load=screenload, address=address[0..12], out=screenout);
    Keyboard(out=keyout);

    // Again, use the 14 MSB to determine the IO output
    Mux16(a=screenout, b=keyout, sel=address[13], out=ioout);
    // And the 15 MSB to determine whether to use the RAM output or the IO output
    Mux16(a=ramout, b=ioout, sel=address[14], out=out);
}
